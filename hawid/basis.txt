Yes! You can **simplify the setup** by running the following commands inside your project directory:  

```sh
npm create vite@latest . --template react  # Initializes Vite in the current directory
npm i --verbose  # Installs Vite dependencies
npm install express mysql2 argon2 dotenv cors helmet express-rate-limit csurf express-session jsonwebtoken bcryptjs concurrently  # Installs backend dependencies --verbose
```

---

## **ðŸ”¹ Adjust Project Structure (All Inside One Folder)**
Since youâ€™re keeping everything inside **one folder**, the structure will look like this:

```
/social-credit-system  # Root directory
  â”œâ”€â”€ /node_modules    # Shared dependencies (React + Express)
  â”œâ”€â”€ /public          # React public assets
  â”œâ”€â”€ /src             # React frontend
  â”‚   â”œâ”€â”€ /pages       # React pages (Login, Register, Dashboard)
  â”‚   â”œâ”€â”€ /services    # API calls (Axios)
  â”‚   â”œâ”€â”€ App.jsx      # Main React component
  â”‚   â”œâ”€â”€ main.jsx     # React entry point
  â”œâ”€â”€ /server          # Express backend
  â”‚   â”œâ”€â”€ server.js    # Main Express server
  â”‚   â”œâ”€â”€ routes.js    # API endpoints
  â”‚   â”œâ”€â”€ db.js        # MySQL connection
  â”‚   â”œâ”€â”€ auth.js      # Authentication (Argon2)
  â”‚   â”œâ”€â”€ security.js  # Security middleware (helmet, rate-limit)
  â”‚   â”œâ”€â”€ .env         # Environment variables
  â”œâ”€â”€ .gitignore
  â”œâ”€â”€ package.json     # Shared dependencies
  â”œâ”€â”€ vite.config.js   # Vite config for frontend proxy
```

---

## **ðŸ”¹ Set Up Backend (Express)**
### **ðŸ“Œ `/server/server.js`**
```js
require('dotenv').config();
const express = require('express');
const cors = require('cors');
const helmet = require('helmet');
const rateLimit = require('express-rate-limit');
const session = require('express-session');
const csurf = require('csurf');
const authRoutes = require('./routes');

const app = express();
app.use(express.json());
app.use(cors());
app.use(helmet());
app.use(rateLimit({ windowMs: 15 * 60 * 1000, max: 100 }));
app.use(session({ secret: process.env.SESSION_SECRET, resave: false, saveUninitialized: true }));
app.use(csurf());

app.use('/social_credit/api/auth', authRoutes);  // API URL set to "/social_credit"

const PORT = process.env.PORT || 5000;
app.listen(PORT, () => console.log(`Server running at http://localhost:${PORT}/social_credit`));
```

---

## **ðŸ”¹ Set Up Frontend Proxy to `/social_credit`**
### **ðŸ“Œ `vite.config.js`**
Modify Viteâ€™s proxy to match Express:
```js
export default {
  server: {
    proxy: {
      '/social_credit/api': 'http://localhost:5000',
    },
  },
};
```
Now, React will automatically forward requests to Express.

---

## **ðŸ”¹ Start Everything with One Command**
Modify `package.json`:
```json
"scripts": {
  "dev": "concurrently \"npm run server\" \"npm run client\"",
  "server": "node server/server.js",
  "client": "vite",
  "build": "vite build"
}
```
Run:
```sh
npm run dev
```
âœ… **React (`Vite`) will start at `http://localhost:5173/social_credit`**  
âœ… **Express API will be available at `http://localhost:5000/social_credit/api`**  

---

### **ðŸŽ¯ Summary**
âœ” **Single `node_modules` for frontend & backend**  
âœ” **Express & React share the same base URL (`/social_credit`)**  
âœ” **Proxy setup prevents CORS issues**  
âœ” **All security features included (Helmet, CSRF, Rate Limit, Argon2, JWT, etc.)**  

This keeps everything **clean & secure!** ðŸš€ Let me know if you need any tweaks!




{
  "date": "YYYY-MM-DD",
  "value": 1000.00,
  "description": "Loan for car repair",
  "status": "unpaid",
  "due_date": "YYYY-MM-DD",
  "payment_history": [
    {
      "amount": 500.00,
      "date": "YYYY-MM-DD",
      "method": "bank transfer"
    }
  ]
}
